#include <stdio.h>




typedef struct node{
  size_t nodeSize;
  void* data;
  struct node* next;  
} node_type;

typedef struct s_in_memory_file {
  size_t totalSize;
  node_type* head;
  node_type* tail;
  
} in_memory_file_type;


in_memory_file_type* data_list_init(void){
  in_memory_file_type *new_list = malloc(sizeof(in_memory_file_type));
  new_list->totalSize = 0;
  new_list->head = NULL;
  new_list->tail = NULL;
  return new_list; 
}


void add_node(in_memory_file_type* list, size_t size, void* data){
    node_type* newNode = malloc(sizeof(node_type));
    newNode->data = malloc(size);
    memcpy(newNode->data, data, size);
    newNode->nodeSize = size;
    //updating
    newNode->next = NULL;
    if (!(list->head)){
      list->head = newNode;
      list->tail = newNode;
      list->totalSize += size;
    } else{
    list->tail->next = newNode;
    list->tail = newNode;
    list->totalSize += size;
    
    }
    return;
}

size_t write_data(void *ptr, size_t size, size_t nmemb, void *list) {
    //creating new node, adding data
    size_t dataSize = size*nmemb;
          
    //updating list
    
    return dataSize;
}

void data_list_clean(in_memory_file_type *list){
     if(!(list->head)){
       free(list);
       return;
    }  else {
    do{
	node_type* temp = list->head;
	free(list->head->data);
	list->head = list->head->next;
	free(temp);
	       
    }  while(list->head->next);
    
    free(list);
    return;  
    }
}